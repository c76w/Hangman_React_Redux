{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nexport const hangmanSlice = createSlice({\n  name: 'hangman',\n  initialState: {\n    wrongLetters: [],\n    correctLetters: [],\n    attemptsLeft: 6,\n    usedLetters: [],\n    keys: ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'],\n    word: '',\n    gameStatus: ''\n  },\n  reducers: {\n    // Update Attempts Left\n    updateAttemptsLeft: state => {\n      state.attemptsLeft = state.attemptsLeft - 1;\n    },\n    // Get a random word\n    getRandomWord: (state, action) => {\n      state.word = action.payload;\n    },\n    // Add correct inputted letters to the correctLetters array\n    addCorrectLetter: (state, action) => {\n      state.correctLetters.push(action.payload);\n    },\n    // Add wrong inputted letters to the wrongLetters array\n    addWrongLetter: (state, action) => {\n      state.wrongLetters.push(action.payload);\n    },\n    // Add all inputted letters to the usedLetters array\n    addUsedLetter: (state, action) => {\n      state.usedLetters.push(action.payload);\n    },\n    // Check for a win or lose result - This will trigger the end of game popup\n    checkWinOrLoose: state => {\n      // Initially set the status as a win\n      let status = 'win';\n\n      // Check for win\n      // If any of the letters in word don't match the letters\n      // in correctLetters then state the status as empty\n      state.word.split('').forEach(letter => {\n        if (!state.correctLetters.includes(letter)) {\n          status = '';\n        }\n      });\n\n      // Check for lose\n      if (state.attemptsLeft === 0) {\n        status = 'lose'; // If there have been 6 attempts then set the status to lose\n      }\n\n      // Set the state gameStatus to status\n      state.gameStatus = status;\n    },\n    // Reset the game - set all state values back to initial values\n    resetGame: state => {\n      state.gameStatus = '';\n      state.attemptsLeft = 6;\n      state.correctLetters = [];\n      state.wrongLetters = [];\n      state.usedLetters = [];\n    }\n  }\n});\nexport const {\n  updateAttemptsLeft,\n  getRandomWord,\n  addCorrectLetter,\n  addWrongLetter,\n  addUsedLetter,\n  checkWinOrLoose,\n  resetGame\n} = hangmanSlice.actions;\nexport default hangmanSlice.reducer;","map":{"version":3,"names":["createSlice","hangmanSlice","name","initialState","wrongLetters","correctLetters","attemptsLeft","usedLetters","keys","word","gameStatus","reducers","updateAttemptsLeft","state","getRandomWord","action","payload","addCorrectLetter","push","addWrongLetter","addUsedLetter","checkWinOrLoose","status","split","forEach","letter","includes","resetGame","actions","reducer"],"sources":["C:/Users/Employee/Desktop/React/hangman/src/store/hangman.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\n\r\nexport const hangmanSlice = createSlice({\r\n\r\n    name: 'hangman',\r\n\r\n    initialState: {\r\n        wrongLetters: [],\r\n        correctLetters: [],\r\n        attemptsLeft: 6,\r\n        usedLetters: [],\r\n        keys: ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'],\r\n        word: '',\r\n        gameStatus: '',\r\n\r\n\r\n    },\r\n\r\n    reducers: {\r\n            // Update Attempts Left\r\n            updateAttemptsLeft: (state) => {\r\n                state.attemptsLeft = state.attemptsLeft - 1;\r\n            },\r\n            // Get a random word\r\n            getRandomWord: (state, action) => {\r\n                state.word = action.payload;\r\n            },\r\n            // Add correct inputted letters to the correctLetters array\r\n            addCorrectLetter: (state, action) => {\r\n                state.correctLetters.push(action.payload);\r\n            },\r\n            // Add wrong inputted letters to the wrongLetters array\r\n            addWrongLetter: (state, action) => {\r\n                state.wrongLetters.push(action.payload);\r\n            },\r\n            // Add all inputted letters to the usedLetters array\r\n            addUsedLetter: (state, action) => {\r\n                state.usedLetters.push(action.payload);\r\n            },\r\n            // Check for a win or lose result - This will trigger the end of game popup\r\n            checkWinOrLoose: (state) => {\r\n\r\n                // Initially set the status as a win\r\n                let status = 'win';\r\n\r\n                // Check for win\r\n                // If any of the letters in word don't match the letters\r\n                // in correctLetters then state the status as empty\r\n                state.word.split('').forEach(letter => {\r\n                    if(!state.correctLetters.includes(letter)){\r\n                        status = '';\r\n                    }\r\n                });\r\n                \r\n                // Check for lose\r\n                if(state.attemptsLeft === 0) {\r\n                    status = 'lose'; // If there have been 6 attempts then set the status to lose\r\n                }\r\n\r\n                // Set the state gameStatus to status\r\n                state.gameStatus = status;\r\n            },\r\n            // Reset the game - set all state values back to initial values\r\n            resetGame: (state) => {\r\n                state.gameStatus = '';\r\n                state.attemptsLeft = 6;\r\n                state.correctLetters = [];\r\n                state.wrongLetters = [];\r\n                state.usedLetters = [];\r\n            }\r\n        },\r\n\r\n});\r\n\r\nexport const { updateAttemptsLeft, getRandomWord, addCorrectLetter, addWrongLetter, addUsedLetter, checkWinOrLoose, resetGame } = hangmanSlice.actions;\r\n\r\nexport default hangmanSlice.reducer;\r\n\r\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAG9C,OAAO,MAAMC,YAAY,GAAGD,WAAW,CAAC;EAEpCE,IAAI,EAAE,SAAS;EAEfC,YAAY,EAAE;IACVC,YAAY,EAAE,EAAE;IAChBC,cAAc,EAAE,EAAE;IAClBC,YAAY,EAAE,CAAC;IACfC,WAAW,EAAE,EAAE;IACfC,IAAI,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC;IACxIC,IAAI,EAAE,EAAE;IACRC,UAAU,EAAE;EAGhB,CAAC;EAEDC,QAAQ,EAAE;IACF;IACAC,kBAAkB,EAAGC,KAAK,IAAK;MAC3BA,KAAK,CAACP,YAAY,GAAGO,KAAK,CAACP,YAAY,GAAG,CAAC;IAC/C,CAAC;IACD;IACAQ,aAAa,EAAE,CAACD,KAAK,EAAEE,MAAM,KAAK;MAC9BF,KAAK,CAACJ,IAAI,GAAGM,MAAM,CAACC,OAAO;IAC/B,CAAC;IACD;IACAC,gBAAgB,EAAE,CAACJ,KAAK,EAAEE,MAAM,KAAK;MACjCF,KAAK,CAACR,cAAc,CAACa,IAAI,CAACH,MAAM,CAACC,OAAO,CAAC;IAC7C,CAAC;IACD;IACAG,cAAc,EAAE,CAACN,KAAK,EAAEE,MAAM,KAAK;MAC/BF,KAAK,CAACT,YAAY,CAACc,IAAI,CAACH,MAAM,CAACC,OAAO,CAAC;IAC3C,CAAC;IACD;IACAI,aAAa,EAAE,CAACP,KAAK,EAAEE,MAAM,KAAK;MAC9BF,KAAK,CAACN,WAAW,CAACW,IAAI,CAACH,MAAM,CAACC,OAAO,CAAC;IAC1C,CAAC;IACD;IACAK,eAAe,EAAGR,KAAK,IAAK;MAExB;MACA,IAAIS,MAAM,GAAG,KAAK;;MAElB;MACA;MACA;MACAT,KAAK,CAACJ,IAAI,CAACc,KAAK,CAAC,EAAE,CAAC,CAACC,OAAO,CAACC,MAAM,IAAI;QACnC,IAAG,CAACZ,KAAK,CAACR,cAAc,CAACqB,QAAQ,CAACD,MAAM,CAAC,EAAC;UACtCH,MAAM,GAAG,EAAE;QACf;MACJ,CAAC,CAAC;;MAEF;MACA,IAAGT,KAAK,CAACP,YAAY,KAAK,CAAC,EAAE;QACzBgB,MAAM,GAAG,MAAM,CAAC,CAAC;MACrB;;MAEA;MACAT,KAAK,CAACH,UAAU,GAAGY,MAAM;IAC7B,CAAC;IACD;IACAK,SAAS,EAAGd,KAAK,IAAK;MAClBA,KAAK,CAACH,UAAU,GAAG,EAAE;MACrBG,KAAK,CAACP,YAAY,GAAG,CAAC;MACtBO,KAAK,CAACR,cAAc,GAAG,EAAE;MACzBQ,KAAK,CAACT,YAAY,GAAG,EAAE;MACvBS,KAAK,CAACN,WAAW,GAAG,EAAE;IAC1B;EACJ;AAER,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEK,kBAAkB;EAAEE,aAAa;EAAEG,gBAAgB;EAAEE,cAAc;EAAEC,aAAa;EAAEC,eAAe;EAAEM;AAAU,CAAC,GAAG1B,YAAY,CAAC2B,OAAO;AAEtJ,eAAe3B,YAAY,CAAC4B,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}