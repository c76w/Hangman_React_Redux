{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport Dictionary from '../assets/JSON/words.json'; // Import the words json file\n\nexport const hangmanSlice = createSlice({\n  name: 'hangman',\n  initialState: {\n    wrongLetters: [],\n    attemptsLeft: 6,\n    letters: [],\n    keys: ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'],\n    word: getRandomWord()\n  },\n  reducers: {\n    // Update Attempts Left\n    updateAttemptsLeft: state => {\n      state.attempsLeft = state.attemptLeft - 1;\n    }\n  },\n  // Get a random word\n  getRandomWord: (state, action) => {\n    // Create array of object keys\n    const words = Object.keys(Dictionary);\n\n    // Generate random index based on number of words\n    const randIndex = Math.floor(Math.random() * words.length);\n\n    // Select a word from the array of words using the random index\n    const randWord = words[randIndex];\n    state.word = randWord;\n  }\n});\nexport const {\n  updateAttemptsLeft\n} = hangmanSlice.actions;\nexport default hangmanSlice.reducer;","map":{"version":3,"names":["createSlice","Dictionary","hangmanSlice","name","initialState","wrongLetters","attemptsLeft","letters","keys","word","getRandomWord","reducers","updateAttemptsLeft","state","attempsLeft","attemptLeft","action","words","Object","randIndex","Math","floor","random","length","randWord","actions","reducer"],"sources":["C:/Users/Employee/Desktop/React/hangman/src/store/hangman.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\nimport Dictionary from '../assets/JSON/words.json'; // Import the words json file\r\n\r\nexport const hangmanSlice = createSlice({\r\n\r\n    name: 'hangman',\r\n\r\n    initialState: {\r\n        wrongLetters: [],\r\n        attemptsLeft: 6,\r\n        letters: [],\r\n        keys: ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'],\r\n        word: getRandomWord(),\r\n\r\n\r\n    },\r\n\r\n    reducers: {\r\n        // Update Attempts Left\r\n        updateAttemptsLeft: (state) => {\r\n            state.attempsLeft = state.attemptLeft - 1;\r\n            }\r\n        },\r\n\r\n        // Get a random word\r\n        getRandomWord: (state, action) => {\r\n            // Create array of object keys\r\n            const words = Object.keys(Dictionary);\r\n\r\n            // Generate random index based on number of words\r\n            const randIndex = Math.floor(Math.random() * words.length);\r\n\r\n            // Select a word from the array of words using the random index\r\n            const randWord = words[randIndex];\r\n\r\n            state.word = randWord;\r\n        }\r\n\r\n});\r\n\r\nexport const { updateAttemptsLeft } = hangmanSlice.actions;\r\n\r\nexport default hangmanSlice.reducer;\r\n\r\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAC9C,OAAOC,UAAU,MAAM,2BAA2B,CAAC,CAAC;;AAEpD,OAAO,MAAMC,YAAY,GAAGF,WAAW,CAAC;EAEpCG,IAAI,EAAE,SAAS;EAEfC,YAAY,EAAE;IACVC,YAAY,EAAE,EAAE;IAChBC,YAAY,EAAE,CAAC;IACfC,OAAO,EAAE,EAAE;IACXC,IAAI,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC;IACxIC,IAAI,EAAEC,aAAa;EAGvB,CAAC;EAEDC,QAAQ,EAAE;IACN;IACAC,kBAAkB,EAAGC,KAAK,IAAK;MAC3BA,KAAK,CAACC,WAAW,GAAGD,KAAK,CAACE,WAAW,GAAG,CAAC;IACzC;EACJ,CAAC;EAED;EACAL,aAAa,EAAE,CAACG,KAAK,EAAEG,MAAM,KAAK;IAC9B;IACA,MAAMC,KAAK,GAAGC,MAAM,CAACV,IAAI,CAACP,UAAU,CAAC;;IAErC;IACA,MAAMkB,SAAS,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,GAAGL,KAAK,CAACM,MAAM,CAAC;;IAE1D;IACA,MAAMC,QAAQ,GAAGP,KAAK,CAACE,SAAS,CAAC;IAEjCN,KAAK,CAACJ,IAAI,GAAGe,QAAQ;EACzB;AAER,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEZ;AAAmB,CAAC,GAAGV,YAAY,CAACuB,OAAO;AAE1D,eAAevB,YAAY,CAACwB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}