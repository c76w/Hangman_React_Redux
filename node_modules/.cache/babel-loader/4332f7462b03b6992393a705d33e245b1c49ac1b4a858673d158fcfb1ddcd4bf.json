{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Employee\\\\Desktop\\\\React\\\\hangman\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// Imports\nimport React, { useEffect } from 'react';\nimport { useDispatch } from 'react-redux'; // Import useDispatch from redux\nimport { getRandomWord } from './store/hangman'; // Import getRandomwWord from the hangman slice\nimport './App.css';\nimport Rules from './components/Rules'; // Import the Rules component\nimport Header from './components/Header'; // Import the Header component\nimport Figure from './components/Figure'; // Import the Figure component\nimport Attempts from './components/Attempts'; // Import the Attempts component\nimport Word from './components/Word'; // Import the Word component\nimport wordsData from './assets/JSON/words.json'; // Import the words json file\nimport WrongLetters from './components/WrongLetters'; // Import the wrong letters component\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  // Declare the dispact variable\n  const dispatch = useDispatch();\n  const randomWord = () => {\n    // Create array of object keys\n    const words = Object.keys(wordsData);\n\n    // Generate random index based on number of words\n    const randIndex = Math.floor(Math.random() * words.length);\n\n    // Select a word from the array of words using the random index\n    const randWord = words[randIndex];\n\n    // Set a random word in the hangman reducer\n    dispatch(getRandomWord(randWord));\n  };\n  useEffect(() => {\n    randomWord();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"d-flex justify-content-center align-items-center flex-column text-center\",\n    children: [/*#__PURE__*/_jsxDEV(Rules, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(WrongLetters, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Attempts, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Figure, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Word, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"rAh3tY+Iv6hWC9AI4Dm+rCbkwNE=\", false, function () {\n  return [useDispatch];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useDispatch","getRandomWord","Rules","Header","Figure","Attempts","Word","wordsData","WrongLetters","App","dispatch","randomWord","words","Object","keys","randIndex","Math","floor","random","length","randWord"],"sources":["C:/Users/Employee/Desktop/React/hangman/src/App.js"],"sourcesContent":["// Imports\nimport React, { useEffect } from 'react';\nimport { useDispatch } from 'react-redux'; // Import useDispatch from redux\nimport { getRandomWord } from './store/hangman'; // Import getRandomwWord from the hangman slice\nimport './App.css';\nimport Rules from './components/Rules'; // Import the Rules component\nimport Header from './components/Header'; // Import the Header component\nimport Figure from './components/Figure'; // Import the Figure component\nimport Attempts from './components/Attempts'; // Import the Attempts component\nimport Word from './components/Word'; // Import the Word component\nimport wordsData from './assets/JSON/words.json'; // Import the words json file\nimport WrongLetters from './components/WrongLetters'; // Import the wrong letters component\n\nfunction App() {\n\n  // Declare the dispact variable\n  const dispatch = useDispatch();\n\n  const randomWord = () => {\n    // Create array of object keys\n    const words = Object.keys(wordsData);\n\n    // Generate random index based on number of words\n    const randIndex = Math.floor(Math.random() * words.length);\n\n    // Select a word from the array of words using the random index\n    const randWord = words[randIndex];\n\n    // Set a random word in the hangman reducer\n    dispatch(getRandomWord(randWord));\n  }\n\n  useEffect(() => {\n      randomWord();\n  },[]);\n\n  return (\n    <div className=\"d-flex justify-content-center align-items-center flex-column text-center\">\n      <Rules />\n      <Header />\n      <WrongLetters />\n      <Attempts />\n      <Figure />\n      <Word />\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,SAASC,WAAW,QAAQ,aAAa,CAAC,CAAC;AAC3C,SAASC,aAAa,QAAQ,iBAAiB,CAAC,CAAC;AACjD,OAAO,WAAW;AAClB,OAAOC,KAAK,MAAM,oBAAoB,CAAC,CAAC;AACxC,OAAOC,MAAM,MAAM,qBAAqB,CAAC,CAAC;AAC1C,OAAOC,MAAM,MAAM,qBAAqB,CAAC,CAAC;AAC1C,OAAOC,QAAQ,MAAM,uBAAuB,CAAC,CAAC;AAC9C,OAAOC,IAAI,MAAM,mBAAmB,CAAC,CAAC;AACtC,OAAOC,SAAS,MAAM,0BAA0B,CAAC,CAAC;AAClD,OAAOC,YAAY,MAAM,2BAA2B,CAAC,CAAC;AAAA;AAEtD,SAASC,GAAG,GAAG;EAAA;EAEb;EACA,MAAMC,QAAQ,GAAGV,WAAW,EAAE;EAE9B,MAAMW,UAAU,GAAG,MAAM;IACvB;IACA,MAAMC,KAAK,GAAGC,MAAM,CAACC,IAAI,CAACP,SAAS,CAAC;;IAEpC;IACA,MAAMQ,SAAS,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,GAAGN,KAAK,CAACO,MAAM,CAAC;;IAE1D;IACA,MAAMC,QAAQ,GAAGR,KAAK,CAACG,SAAS,CAAC;;IAEjC;IACAL,QAAQ,CAACT,aAAa,CAACmB,QAAQ,CAAC,CAAC;EACnC,CAAC;EAEDrB,SAAS,CAAC,MAAM;IACZY,UAAU,EAAE;EAChB,CAAC,EAAC,EAAE,CAAC;EAEL,oBACE;IAAK,SAAS,EAAC,0EAA0E;IAAA,wBACvF,QAAC,KAAK;MAAA;MAAA;MAAA;IAAA,QAAG,eACT,QAAC,MAAM;MAAA;MAAA;MAAA;IAAA,QAAG,eACV,QAAC,YAAY;MAAA;MAAA;MAAA;IAAA,QAAG,eAChB,QAAC,QAAQ;MAAA;MAAA;MAAA;IAAA,QAAG,eACZ,QAAC,MAAM;MAAA;MAAA;MAAA;IAAA,QAAG,eACV,QAAC,IAAI;MAAA;MAAA;MAAA;IAAA,QAAG;EAAA;IAAA;IAAA;IAAA;EAAA,QACJ;AAEV;AAAC,GAjCQF,GAAG;EAAA,QAGOT,WAAW;AAAA;AAAA,KAHrBS,GAAG;AAmCZ,eAAeA,GAAG;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}