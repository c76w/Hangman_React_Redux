{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Employee\\\\Desktop\\\\React\\\\hangman\\\\src\\\\components\\\\Keyboard.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { addCorrectLetter, addWrongLetter, updateAttemptsLeft, addUsedLetter, checkWinOrLoose, resetGame } from '../store/hangman';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Keyboard = props => {\n  _s();\n  const keys = useSelector(state => state.hangman.keys);\n  const usedLetters = useSelector(state => state.hangman.usedLetters);\n  const wrongLetters = useSelector(state => state.hangman.wrongLetters);\n  const correctLetters = useSelector(state => state.hangman.correctLetters);\n  const word = useSelector(state => state.hangman.word);\n  const attemptsLeft = useSelector(state => state.hangman.attemptsLeft);\n  const dispatch = useDispatch();\n  const handleButtonClick = e => {\n    const letter = e.target.value;\n    if (attemptsLeft === 0) {\n      return;\n    }\n    if (word.includes(letter)) {\n      if (!correctLetters.includes(letter)) {\n        dispatch(addCorrectLetter(letter));\n      }\n    } else {\n      if (!wrongLetters.includes(letter)) {\n        dispatch(addWrongLetter(letter));\n        dispatch(updateAttemptsLeft());\n      }\n    }\n    dispatch(checkWinOrLoose());\n    dispatch(addUsedLetter(letter));\n  };\n  const handleReset = () => {\n    // Set a random word in the hangman reducer\n    dispatch(resetGame());\n\n    // Reset the random word\n    props.randomWord();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"keyboard\",\n    children: [keys.map((key, i) => {\n      return /*#__PURE__*/_jsxDEV(\"button\", {\n        className: 'btn key ' + (wrongLetters.includes(key) ? 'keyWrong ' : 'keyCurrent ') + (correctLetters.includes(key) ? 'keyCorrect' : ''),\n        disabled: usedLetters.includes(key) ? true : false,\n        value: key,\n        onClick: e => handleButtonClick(e),\n        children: key\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 21\n      }, this);\n    }), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      onClick: () => {\n        handleReset();\n      },\n      className: \"btn btn-outline-light\",\n      children: \"Reset\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 9\n  }, this);\n};\n_s(Keyboard, \"6V7w38LagMYgKYW1HN3rb7yElwE=\", false, function () {\n  return [useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useDispatch];\n});\n_c = Keyboard;\nexport default Keyboard;\nvar _c;\n$RefreshReg$(_c, \"Keyboard\");","map":{"version":3,"names":["React","useSelector","useDispatch","addCorrectLetter","addWrongLetter","updateAttemptsLeft","addUsedLetter","checkWinOrLoose","resetGame","Keyboard","props","keys","state","hangman","usedLetters","wrongLetters","correctLetters","word","attemptsLeft","dispatch","handleButtonClick","e","letter","target","value","includes","handleReset","randomWord","map","key","i"],"sources":["C:/Users/Employee/Desktop/React/hangman/src/components/Keyboard.js"],"sourcesContent":["import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { addCorrectLetter, addWrongLetter, updateAttemptsLeft, addUsedLetter, checkWinOrLoose, resetGame } from '../store/hangman';\r\n\r\nconst Keyboard = (props) => {\r\n\r\n    const keys = useSelector((state) => state.hangman.keys);\r\n    const usedLetters = useSelector((state) => state.hangman.usedLetters);\r\n    const wrongLetters = useSelector((state) => state.hangman.wrongLetters);\r\n    const correctLetters = useSelector((state) => state.hangman.correctLetters);\r\n    const word = useSelector((state) => state.hangman.word);\r\n    const attemptsLeft = useSelector((state) => state.hangman.attemptsLeft);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const handleButtonClick = (e) => {\r\n        const letter = e.target.value;\r\n        if (attemptsLeft === 0) {\r\n            return;\r\n        }\r\n        if (word.includes(letter)) {\r\n            if (!correctLetters.includes(letter)) {\r\n                dispatch(addCorrectLetter(letter));\r\n            }\r\n        } else {\r\n            if (!wrongLetters.includes(letter)) {\r\n                dispatch(addWrongLetter(letter));\r\n                dispatch(updateAttemptsLeft());\r\n            }\r\n        }\r\n        dispatch(checkWinOrLoose());\r\n        dispatch(addUsedLetter(letter));\r\n    }\r\n\r\n    const handleReset = () => {\r\n\r\n        // Set a random word in the hangman reducer\r\n        dispatch(resetGame()); \r\n            \r\n        // Reset the random word\r\n        props.randomWord();\r\n    }\r\n\r\n    return (\r\n        <div className='keyboard'>\r\n            {keys.map((key, i) => {\r\n                return (\r\n                    <button\r\n                        className={'btn key ' + (wrongLetters.includes(key) ? 'keyWrong ' : 'keyCurrent ')  + (correctLetters.includes(key) ? 'keyCorrect' : '') }\r\n                        key={i}\r\n                        disabled={usedLetters.includes(key) ? true : false}\r\n                        value={key}\r\n                        onClick={(e) => handleButtonClick(e)}\r\n                        >{key}\r\n                    </button>\r\n                );\r\n            })}\r\n            <button type='button' onClick={() => {handleReset()}} className=\"btn btn-outline-light\">Reset</button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Keyboard;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}