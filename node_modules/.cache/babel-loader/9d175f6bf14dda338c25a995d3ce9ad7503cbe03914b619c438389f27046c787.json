{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Employee\\\\Desktop\\\\React\\\\hangman\\\\src\\\\components\\\\Keyboard.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useSelector, useDispatch } from 'react-redux'; // Import useSelector and useDispatch from redux\nimport { addCorrectLetter, addWrongLetter, updateAttemptsLeft, addUsedLetter, checkWinOrLoose, resetGame } from '../store/hangman'; // Import reducers from hangman store slice\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Keyboard = props => {\n  _s();\n  // Set all the variables from the hangman slice store state\n  const keys = useSelector(state => state.hangman.keys);\n  const usedLetters = useSelector(state => state.hangman.usedLetters);\n  const wrongLetters = useSelector(state => state.hangman.wrongLetters);\n  const correctLetters = useSelector(state => state.hangman.correctLetters);\n  const word = useSelector(state => state.hangman.word);\n  const attemptsLeft = useSelector(state => state.hangman.attemptsLeft);\n\n  // Set use dispatch\n  const dispatch = useDispatch();\n\n  // Function to handle the letter button event\n  const handleButtonClick = e => {\n    // Set the letter variable from the event target value\n    const letter = e.target.value;\n\n    // Check the letter to see if it is a correct letter (matches a letter in the word)\n    // or it is a wrong letter (doesn't match a letter in the word)\n    if (word.includes(letter)) {\n      if (!correctLetters.includes(letter)) {\n        dispatch(addCorrectLetter(letter)); // Add the letter to the correct letters array\n      }\n    } else {\n      if (!wrongLetters.includes(letter)) {\n        dispatch(addWrongLetter(letter)); // Add the letter to the correct letters array\n        dispatch(updateAttemptsLeft()); // Update the attempts used state\n      }\n    }\n    // Check for a win or lose\n    dispatch(checkWinOrLoose());\n\n    // Add the letter to the used letters state array\n    dispatch(addUsedLetter(letter));\n  };\n\n  // Function to handle the reset click to reset the game\n  const handleReset = () => {\n    // Set a random word in the hangman reducer\n    dispatch(resetGame());\n\n    // Reset the random word\n    props.randomWord();\n  };\n  return (\n    /*#__PURE__*/\n    // Keyboard\n    _jsxDEV(\"div\", {\n      className: \"keyboard\",\n      children: [keys.map((key, i) => {\n        return /*#__PURE__*/_jsxDEV(\"button\", {\n          className: 'btn key ' + (wrongLetters.includes(key) ? 'keyWrong ' : 'keyCurrent ') + (correctLetters.includes(key) ? 'keyCorrect' : ''),\n          disabled: usedLetters.includes(key) ? true : false,\n          value: key,\n          onClick: e => handleButtonClick(e),\n          children: key\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 21\n        }, this);\n      }), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: () => {\n          handleReset();\n        },\n        className: \"btn key btn-outline-light\",\n        children: \"Reset\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }, this)\n    // End Keyboard\n  );\n};\n_s(Keyboard, \"6V7w38LagMYgKYW1HN3rb7yElwE=\", false, function () {\n  return [useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useDispatch];\n});\n_c = Keyboard;\nexport default Keyboard;\nvar _c;\n$RefreshReg$(_c, \"Keyboard\");","map":{"version":3,"names":["React","useSelector","useDispatch","addCorrectLetter","addWrongLetter","updateAttemptsLeft","addUsedLetter","checkWinOrLoose","resetGame","Keyboard","props","keys","state","hangman","usedLetters","wrongLetters","correctLetters","word","attemptsLeft","dispatch","handleButtonClick","e","letter","target","value","includes","handleReset","randomWord","map","key","i"],"sources":["C:/Users/Employee/Desktop/React/hangman/src/components/Keyboard.js"],"sourcesContent":["import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux'; // Import useSelector and useDispatch from redux\r\nimport { addCorrectLetter, addWrongLetter, updateAttemptsLeft, addUsedLetter, checkWinOrLoose, resetGame } from '../store/hangman'; // Import reducers from hangman store slice\r\n\r\nconst Keyboard = (props) => {\r\n\r\n    // Set all the variables from the hangman slice store state\r\n    const keys = useSelector((state) => state.hangman.keys);\r\n    const usedLetters = useSelector((state) => state.hangman.usedLetters);\r\n    const wrongLetters = useSelector((state) => state.hangman.wrongLetters);\r\n    const correctLetters = useSelector((state) => state.hangman.correctLetters);\r\n    const word = useSelector((state) => state.hangman.word);\r\n    const attemptsLeft = useSelector((state) => state.hangman.attemptsLeft);\r\n\r\n    // Set use dispatch\r\n    const dispatch = useDispatch();\r\n\r\n    // Function to handle the letter button event\r\n    const handleButtonClick = (e) => {\r\n\r\n        // Set the letter variable from the event target value\r\n        const letter = e.target.value;\r\n\r\n        // Check the letter to see if it is a correct letter (matches a letter in the word)\r\n        // or it is a wrong letter (doesn't match a letter in the word)\r\n        if (word.includes(letter)) {\r\n            if (!correctLetters.includes(letter)) {\r\n                dispatch(addCorrectLetter(letter)); // Add the letter to the correct letters array\r\n            }\r\n        } else {\r\n            if (!wrongLetters.includes(letter)) {\r\n                dispatch(addWrongLetter(letter)); // Add the letter to the correct letters array\r\n                dispatch(updateAttemptsLeft()); // Update the attempts used state\r\n            }\r\n        }\r\n        // Check for a win or lose\r\n        dispatch(checkWinOrLoose());\r\n\r\n        // Add the letter to the used letters state array\r\n        dispatch(addUsedLetter(letter));\r\n    }\r\n\r\n    // Function to handle the reset click to reset the game\r\n    const handleReset = () => {\r\n\r\n        // Set a random word in the hangman reducer\r\n        dispatch(resetGame()); \r\n            \r\n        // Reset the random word\r\n        props.randomWord();\r\n    }\r\n\r\n    return (\r\n        // Keyboard\r\n        <div className='keyboard'>\r\n            {keys.map((key, i) => {\r\n                return (\r\n                    <button\r\n                        className={'btn key ' + (wrongLetters.includes(key) ? 'keyWrong ' : 'keyCurrent ')  + (correctLetters.includes(key) ? 'keyCorrect' : '') }\r\n                        key={i}\r\n                        disabled={usedLetters.includes(key) ? true : false}\r\n                        value={key}\r\n                        onClick={(e) => handleButtonClick(e)}\r\n                        >{key}\r\n                    </button>\r\n                );\r\n            })}\r\n            <button type='button' onClick={() => {handleReset()}} className=\"btn key btn-outline-light\">Reset</button>\r\n        </div>\r\n        // End Keyboard\r\n    );\r\n};\r\n\r\nexport default Keyboard;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}